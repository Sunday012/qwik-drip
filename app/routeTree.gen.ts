/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as publicPublicImport } from './routes/(public)/_public'
import { Route as publicPublicIndexImport } from './routes/(public)/_public/index'
import { Route as publicPublicWelcomeImport } from './routes/(public)/_public/welcome'
import { Route as publicPublicAppointmentImport } from './routes/(public)/_public/appointment'

// Create Virtual Routes

const publicImport = createFileRoute('/(public)')()

// Create/Update Routes

const publicRoute = publicImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const publicPublicRoute = publicPublicImport.update({
  id: '/_public',
  getParentRoute: () => publicRoute,
} as any)

const publicPublicIndexRoute = publicPublicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicPublicRoute,
} as any)

const publicPublicWelcomeRoute = publicPublicWelcomeImport.update({
  id: '/welcome',
  path: '/welcome',
  getParentRoute: () => publicPublicRoute,
} as any)

const publicPublicAppointmentRoute = publicPublicAppointmentImport.update({
  id: '/appointment',
  path: '/appointment',
  getParentRoute: () => publicPublicRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicImport
      parentRoute: typeof rootRoute
    }
    '/(public)/_public': {
      id: '/(public)/_public'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicPublicImport
      parentRoute: typeof publicRoute
    }
    '/(public)/_public/appointment': {
      id: '/(public)/_public/appointment'
      path: '/appointment'
      fullPath: '/appointment'
      preLoaderRoute: typeof publicPublicAppointmentImport
      parentRoute: typeof publicPublicImport
    }
    '/(public)/_public/welcome': {
      id: '/(public)/_public/welcome'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof publicPublicWelcomeImport
      parentRoute: typeof publicPublicImport
    }
    '/(public)/_public/': {
      id: '/(public)/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicPublicIndexImport
      parentRoute: typeof publicPublicImport
    }
  }
}

// Create and export the route tree

interface publicPublicRouteChildren {
  publicPublicAppointmentRoute: typeof publicPublicAppointmentRoute
  publicPublicWelcomeRoute: typeof publicPublicWelcomeRoute
  publicPublicIndexRoute: typeof publicPublicIndexRoute
}

const publicPublicRouteChildren: publicPublicRouteChildren = {
  publicPublicAppointmentRoute: publicPublicAppointmentRoute,
  publicPublicWelcomeRoute: publicPublicWelcomeRoute,
  publicPublicIndexRoute: publicPublicIndexRoute,
}

const publicPublicRouteWithChildren = publicPublicRoute._addFileChildren(
  publicPublicRouteChildren,
)

interface publicRouteChildren {
  publicPublicRoute: typeof publicPublicRouteWithChildren
}

const publicRouteChildren: publicRouteChildren = {
  publicPublicRoute: publicPublicRouteWithChildren,
}

const publicRouteWithChildren =
  publicRoute._addFileChildren(publicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof publicPublicIndexRoute
  '/appointment': typeof publicPublicAppointmentRoute
  '/welcome': typeof publicPublicWelcomeRoute
}

export interface FileRoutesByTo {
  '/appointment': typeof publicPublicAppointmentRoute
  '/welcome': typeof publicPublicWelcomeRoute
  '/': typeof publicPublicIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(public)': typeof publicRouteWithChildren
  '/(public)/_public': typeof publicPublicRouteWithChildren
  '/(public)/_public/appointment': typeof publicPublicAppointmentRoute
  '/(public)/_public/welcome': typeof publicPublicWelcomeRoute
  '/(public)/_public/': typeof publicPublicIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/appointment' | '/welcome'
  fileRoutesByTo: FileRoutesByTo
  to: '/appointment' | '/welcome' | '/'
  id:
    | '__root__'
    | '/(public)'
    | '/(public)/_public'
    | '/(public)/_public/appointment'
    | '/(public)/_public/welcome'
    | '/(public)/_public/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  publicRoute: typeof publicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  publicRoute: publicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(public)"
      ]
    },
    "/(public)": {
      "filePath": "(public)",
      "children": [
        "/(public)/_public"
      ]
    },
    "/(public)/_public": {
      "filePath": "(public)/_public.tsx",
      "parent": "/(public)",
      "children": [
        "/(public)/_public/appointment",
        "/(public)/_public/welcome",
        "/(public)/_public/"
      ]
    },
    "/(public)/_public/appointment": {
      "filePath": "(public)/_public/appointment.tsx",
      "parent": "/(public)/_public"
    },
    "/(public)/_public/welcome": {
      "filePath": "(public)/_public/welcome.tsx",
      "parent": "/(public)/_public"
    },
    "/(public)/_public/": {
      "filePath": "(public)/_public/index.tsx",
      "parent": "/(public)/_public"
    }
  }
}
ROUTE_MANIFEST_END */
